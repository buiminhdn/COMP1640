// <auto-generated />
using System;
using COMP1640.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace COMP1640.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250320004032_addChat")]
    partial class addChat
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("COMP1640.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MessageCount")
                        .HasColumnType("integer");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<string>("TutorId")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("TutorId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1001",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6108ca94-655c-4565-8753-7e959446a1c3",
                            Email = "teacher@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Nhu Vinh",
                            LockoutEnabled = false,
                            MessageCount = 0,
                            NormalizedEmail = "TEACHER@GMAIL.COM",
                            NormalizedUserName = "TEACHER@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEH4nFFWpwtjyTcEO/lesr1YvQUUz2wET2+Wom9VOA5uz5MNa1LsccI1PaSqmgOjmkQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cb28367f-69ed-46ca-a461-74693aee29cc",
                            TwoFactorEnabled = false,
                            UserName = "teacher@gmail.com"
                        },
                        new
                        {
                            Id = "1002",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3ee0aa6b-5525-49ff-a3c3-16c3733bb936",
                            Email = "teacher2@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Thanh Tra",
                            LockoutEnabled = false,
                            MessageCount = 0,
                            NormalizedEmail = "TEACHER2@GMAIL.COM",
                            NormalizedUserName = "TEACHER2@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPJ7VtmBg381eD5i4bVzQYBBiLLR2f/jpX6Voy+Eg7dXH8Zil48pQ7NnoE4Z0o5ifA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "051226ce-819a-47a0-9bf1-ca40900d1913",
                            TwoFactorEnabled = false,
                            UserName = "teacher2@gmail.com"
                        },
                        new
                        {
                            Id = "1003",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3e17baa9-a3e2-44d9-9fd2-aa1577c2c7f2",
                            Email = "staff@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Nathan Json",
                            LockoutEnabled = false,
                            MessageCount = 0,
                            NormalizedEmail = "STAFF@GMAIL.COM",
                            NormalizedUserName = "STAFF@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECQRJHJZZUKYUJYuKO3NhKQOHP9MKlhxZsxKRws5ZGNAI0PInhuSBpd/tDpbLmqwAw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "22668827-3fe6-4be1-9b1c-640c0cb4c15a",
                            TwoFactorEnabled = false,
                            UserName = "staff@gmail.com"
                        },
                        new
                        {
                            Id = "1004",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7bc05003-be36-42d8-85e5-22ec83aef7b6",
                            Email = "staff2@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Ly Tieu Long",
                            LockoutEnabled = false,
                            MessageCount = 0,
                            NormalizedEmail = "STAFF2@GMAIL.COM",
                            NormalizedUserName = "STAFF2@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEL2KNE4ZTUbLm2Cv50P1RAeEa7fcYF5WlROZrTqpQut4jBajk22k1kWfDGNhPeneHg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2fa8fd81-0a7a-4eb6-ba14-42c39736b83f",
                            TwoFactorEnabled = false,
                            UserName = "staff2@gmail.com"
                        },
                        new
                        {
                            Id = "2001",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "309a0ef7-1009-4b11-bb7d-671f386da566",
                            Email = "student1@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Bui Quang Minh",
                            LockoutEnabled = false,
                            MessageCount = 350,
                            NormalizedEmail = "STUDENT1@GMAIL.COM",
                            NormalizedUserName = "STUDENT1@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEO4RHYvpDvNrgtkUE/912TLHrMyX6x4jgN0XZrtdu5PrqNnEe+Sj0pDkYT9B7E7fLA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2bbc7d4c-7afc-49e6-88e9-2df0856b088b",
                            TutorId = "1001",
                            TwoFactorEnabled = false,
                            UserName = "student1@gmail.com"
                        },
                        new
                        {
                            Id = "2002",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c70b2ac0-15c4-43af-8521-61e051f176ba",
                            Email = "student2@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Nguyen Hoang Anh",
                            LockoutEnabled = false,
                            MessageCount = 220,
                            NormalizedEmail = "STUDENT2@GMAIL.COM",
                            NormalizedUserName = "STUDENT2@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFll+nKqe18rzjXvb5uJWZIl4c9J86MmZrGaqR1dPVyjv0+H/JbmHbwvHvheNPmwVA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3198fe29-1b9d-4b96-89e3-72c220954341",
                            TutorId = "1002",
                            TwoFactorEnabled = false,
                            UserName = "student2@gmail.com"
                        },
                        new
                        {
                            Id = "2003",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d80f32a8-a90b-484e-81b0-b5487ef9db14",
                            Email = "student3@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Tran Bao Ngoc",
                            LockoutEnabled = false,
                            MessageCount = 100,
                            NormalizedEmail = "STUDENT3@GMAIL.COM",
                            NormalizedUserName = "STUDENT3@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOs56VdfKOnqEWKan4Ac4N9s0LrKVStSrwGYUjhbChACUNDwRbtRzVJ4lALB/aFqtA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5b0eaa34-f172-45ca-b137-025db6d04eb8",
                            TwoFactorEnabled = false,
                            UserName = "student3@gmail.com"
                        },
                        new
                        {
                            Id = "2004",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "955bff7f-80d0-4c64-b17b-5246fae31d45",
                            Email = "student4@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Pham Tuan Kiet",
                            LockoutEnabled = false,
                            MessageCount = 75,
                            NormalizedEmail = "STUDENT4@GMAIL.COM",
                            NormalizedUserName = "STUDENT4@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHDi/3XQ0TqdcFPMcLPrytXjldegXy0SUfXjgx/pyO5a9jPaTXws6vwTkqYkuzlhlQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "43704249-68c6-4802-b4a0-9b6a3324fb72",
                            TutorId = "1001",
                            TwoFactorEnabled = false,
                            UserName = "student4@gmail.com"
                        },
                        new
                        {
                            Id = "2005",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "54ca565c-3fa4-4cef-896f-4a8f1afaeccb",
                            Email = "student5@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Le Hong Phong",
                            LockoutEnabled = false,
                            MessageCount = 50,
                            NormalizedEmail = "STUDENT5@GMAIL.COM",
                            NormalizedUserName = "STUDENT5@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBbIeQDot8LSMmf0bn+KZaowSO+ahrFO6pQyyuPCiGG1CRwbws9YUOb5v7X+5UXYcw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7987406d-c2f7-40e7-a1bd-6bff76d23412",
                            TwoFactorEnabled = false,
                            UserName = "student5@gmail.com"
                        });
                });

            modelBuilder.Entity("COMP1640.Models.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UploadedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("COMP1640.Models.Meeting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("OrganizerId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ScheduledTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Meetings");
                });

            modelBuilder.Entity("COMP1640.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ReceiverId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("COMP1640.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        },
                        new
                        {
                            Id = "2",
                            Name = "Teacher",
                            NormalizedName = "TEACHER"
                        },
                        new
                        {
                            Id = "3",
                            Name = "Staff",
                            NormalizedName = "STAFF"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "1001",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "1002",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "1003",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "1004",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "2001",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "2002",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "2003",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "2004",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "2005",
                            RoleId = "1"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("COMP1640.Models.ApplicationUser", b =>
                {
                    b.HasOne("COMP1640.Models.ApplicationUser", "Tutor")
                        .WithMany()
                        .HasForeignKey("TutorId");

                    b.Navigation("Tutor");
                });

            modelBuilder.Entity("COMP1640.Models.Message", b =>
                {
                    b.HasOne("COMP1640.Models.ApplicationUser", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("COMP1640.Models.ApplicationUser", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("COMP1640.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("COMP1640.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("COMP1640.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("COMP1640.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
