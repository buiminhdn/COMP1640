// <auto-generated />
using System;
using COMP1640.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace COMP1640.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250321023557_addmeeting")]
    partial class addmeeting
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("COMP1640.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MessageCount")
                        .HasColumnType("integer");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<string>("TutorId")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("TutorId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1001",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "470f8b47-c38e-4090-9ceb-5241a9d0b21f",
                            Email = "teacher@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Nhu Vinh",
                            LockoutEnabled = false,
                            MessageCount = 0,
                            NormalizedEmail = "TEACHER@GMAIL.COM",
                            NormalizedUserName = "TEACHER@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDM3a1hv+QDg/TgIam8SDw4FAd962sjUnZFrxrYIUV2e/VTAaARzMVqw5NTjBUT0iA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "03dccd83-c725-4e0d-950e-4769f6a65bc9",
                            TwoFactorEnabled = false,
                            UserName = "teacher@gmail.com"
                        },
                        new
                        {
                            Id = "1002",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a5a49b8a-074d-4a31-8d18-6fb13c4aa1ad",
                            Email = "teacher2@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Thanh Tra",
                            LockoutEnabled = false,
                            MessageCount = 0,
                            NormalizedEmail = "TEACHER2@GMAIL.COM",
                            NormalizedUserName = "TEACHER2@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFBxZtxSsKf2GSBE0h9FzTykpUvbUoT+2O+RoWVupfXSkZt5GK4mj5aszu5hJjs04A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5ec47238-f797-46e3-b5a3-81d5c1acef5e",
                            TwoFactorEnabled = false,
                            UserName = "teacher2@gmail.com"
                        },
                        new
                        {
                            Id = "1003",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "72022aaf-120d-437a-a094-df305c355ac9",
                            Email = "staff@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Nathan Json",
                            LockoutEnabled = false,
                            MessageCount = 0,
                            NormalizedEmail = "STAFF@GMAIL.COM",
                            NormalizedUserName = "STAFF@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENJtd8hm8z9DtLv8bQbCHUWBTQHIHvRKp5FTrIFDdZggb1g4SIyEeeXVuwb8z5/xfA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ca374f9e-ed8f-42a6-b622-afb8e0034a04",
                            TwoFactorEnabled = false,
                            UserName = "staff@gmail.com"
                        },
                        new
                        {
                            Id = "1004",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a8d11138-2ca1-429d-873d-e1ea605c62e1",
                            Email = "staff2@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Ly Tieu Long",
                            LockoutEnabled = false,
                            MessageCount = 0,
                            NormalizedEmail = "STAFF2@GMAIL.COM",
                            NormalizedUserName = "STAFF2@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEESYUGvvtvLdV567zGZmZUwe/92o6oQADDXYZg2IIzQ6jetyiXasT814RJ5IBPB48w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "014b5529-9afa-410e-bb6d-f8c88178fc55",
                            TwoFactorEnabled = false,
                            UserName = "staff2@gmail.com"
                        },
                        new
                        {
                            Id = "2001",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "db35a21b-8098-4a27-b0f8-e59ad6cc140d",
                            Email = "student1@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Bui Quang Minh",
                            LockoutEnabled = false,
                            MessageCount = 350,
                            NormalizedEmail = "STUDENT1@GMAIL.COM",
                            NormalizedUserName = "STUDENT1@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEO33fklruefZW/kJbdiOKUQIAN/9x9O/adgaY8qtfj0cvmFJOWiD/U+i/3Y/OLya1w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "94fd903e-e406-405c-a824-a07a3e396681",
                            TutorId = "1001",
                            TwoFactorEnabled = false,
                            UserName = "student1@gmail.com"
                        },
                        new
                        {
                            Id = "2002",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "897c1264-c642-493c-81b2-6018a72b35be",
                            Email = "student2@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Nguyen Hoang Anh",
                            LockoutEnabled = false,
                            MessageCount = 220,
                            NormalizedEmail = "STUDENT2@GMAIL.COM",
                            NormalizedUserName = "STUDENT2@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEALX6SSrfyRSD7tgbrU0WeP2cqvkPnRuY2USf2RTfOD+dVSQSN1VfEpL7FvmKlDjgQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7581ee43-e6bb-4cd6-86c5-0a07978701a1",
                            TutorId = "1002",
                            TwoFactorEnabled = false,
                            UserName = "student2@gmail.com"
                        },
                        new
                        {
                            Id = "2003",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "47d44162-a658-4a70-adb8-0961e1e42d73",
                            Email = "student3@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Tran Bao Ngoc",
                            LockoutEnabled = false,
                            MessageCount = 100,
                            NormalizedEmail = "STUDENT3@GMAIL.COM",
                            NormalizedUserName = "STUDENT3@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEG6n1eH6dkJqEdIF7gzjRKtDyajvqhQYikIT8EEcP7LccfQFwiSkpFqcu0XlIjy2hg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bef36bc6-9fd6-4700-aadb-a7672479ca3f",
                            TwoFactorEnabled = false,
                            UserName = "student3@gmail.com"
                        },
                        new
                        {
                            Id = "2004",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a8ef9235-0fc9-4e6d-b56c-1f55da861a92",
                            Email = "student4@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Pham Tuan Kiet",
                            LockoutEnabled = false,
                            MessageCount = 75,
                            NormalizedEmail = "STUDENT4@GMAIL.COM",
                            NormalizedUserName = "STUDENT4@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFCfY4Lu/JvgK9DjSVbKHW5RJ4sX8c5hHRSaYvPgqT4afsklczsdT0wjBSHdNJ+Vgw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "62d92d40-1aca-467a-8c31-7705ead8f600",
                            TutorId = "1001",
                            TwoFactorEnabled = false,
                            UserName = "student4@gmail.com"
                        },
                        new
                        {
                            Id = "2005",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d169fad5-884e-4979-a3f5-c8603e6687cf",
                            Email = "student5@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Le Hong Phong",
                            LockoutEnabled = false,
                            MessageCount = 50,
                            NormalizedEmail = "STUDENT5@GMAIL.COM",
                            NormalizedUserName = "STUDENT5@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEP2hd/FRPs8x+If0SXsqeA58a3409LnCLntHpI4Bj+MZsgML0wl1WoQ5o0m7H3dMGQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "22863a14-d86c-46e6-aa5f-d7fcf90321b8",
                            TwoFactorEnabled = false,
                            UserName = "student5@gmail.com"
                        });
                });

            modelBuilder.Entity("COMP1640.Models.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UploadedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("COMP1640.Models.Interaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TutorId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("TutorId");

                    b.ToTable("Interactions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            StudentId = "1e64a03d-37b5-4c8c-9985-64383c47a696",
                            Timestamp = new DateTime(2025, 3, 21, 2, 28, 56, 377, DateTimeKind.Utc).AddTicks(5542),
                            TutorId = "1002",
                            Type = "Uploaded a document"
                        },
                        new
                        {
                            Id = 2,
                            StudentId = "1e64a03d-37b5-4c8c-9985-64383c47a696",
                            Timestamp = new DateTime(2025, 3, 21, 2, 20, 56, 377, DateTimeKind.Utc).AddTicks(5552),
                            TutorId = "1002",
                            Type = "Sent you a message"
                        },
                        new
                        {
                            Id = 3,
                            StudentId = "1e64a03d-37b5-4c8c-9985-64383c47a696",
                            Timestamp = new DateTime(2025, 3, 21, 2, 5, 56, 377, DateTimeKind.Utc).AddTicks(5553),
                            TutorId = "1001",
                            Type = "Commented on your document"
                        });
                });

            modelBuilder.Entity("COMP1640.Models.Meeting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MeetingLink")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TeacherId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Meetings");
                });

            modelBuilder.Entity("COMP1640.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ReceiverId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("COMP1640.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        },
                        new
                        {
                            Id = "2",
                            Name = "Teacher",
                            NormalizedName = "TEACHER"
                        },
                        new
                        {
                            Id = "3",
                            Name = "Staff",
                            NormalizedName = "STAFF"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "1001",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "1002",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "1003",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "1004",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "2001",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "2002",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "2003",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "2004",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "2005",
                            RoleId = "1"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("COMP1640.Models.ApplicationUser", b =>
                {
                    b.HasOne("COMP1640.Models.ApplicationUser", "Tutor")
                        .WithMany()
                        .HasForeignKey("TutorId");

                    b.Navigation("Tutor");
                });

            modelBuilder.Entity("COMP1640.Models.Interaction", b =>
                {
                    b.HasOne("COMP1640.Models.ApplicationUser", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("COMP1640.Models.ApplicationUser", "Tutor")
                        .WithMany()
                        .HasForeignKey("TutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Tutor");
                });

            modelBuilder.Entity("COMP1640.Models.Meeting", b =>
                {
                    b.HasOne("COMP1640.Models.ApplicationUser", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("COMP1640.Models.ApplicationUser", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("COMP1640.Models.Message", b =>
                {
                    b.HasOne("COMP1640.Models.ApplicationUser", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("COMP1640.Models.ApplicationUser", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("COMP1640.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("COMP1640.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("COMP1640.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("COMP1640.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
